Manipulando JSON em Java com Gson
=================================
Prof. Valdir Stumm Júnior - <valdir.stumm@blumenau.ifc.edu.br>


http://pt.wikipedia.org/wiki/JSON[JSON] é um formato muito popular para representação de dados, utilizado principalmente para a troca de dados entre programas. Veja abaixo o exemplo de um objeto de um tipo `Pessoa` representado em JSON:

[source,json]
-----
{
    "nome": "João da Silva Sauro",
    "cpf": "999.999.999-99",
    "email": "joao@joao.com",
}
-----

Por ser puramente textual, esse formato permite que programas escritos em linguagens de programação diferentes troquem dados de uma forma descomplicada. Como um programa escrito em Java poderia trocar dados com um programa escrito em Python? Cada uma tem sua forma de representar objetos na memória. Um objeto Java não poderia ser carregado na memória de um programa Python, pois não são compatíveis.

Usando JSON, o programa escrito em Java gera uma representação JSON do objeto em questão (que vai ser uma simples string) e a envia ao programa escrito em Python. Este, sabendo como manipular JSON, pega a representação em JSON e constrói um objeto Python para fazer as operações que necessita.


JSON em Java com Gson
---------------------
http://code.google.com/p/google-gson/[Gson] é uma biblioteca Java desenvolvida pela Google que implementa as funcionalidades necessárias para codificar objetos Java em formato JSON e para decodificar conteúdo JSON para objetos Java.

Instalação
~~~~~~~~~~
Vá até a http://code.google.com/p/google-gson/downloads/list[página de downloads do projeto] e baixe o arquivo .zip contendo o Gson. Feito isso, extraia o conteúdo (especialmente o arquivo `gson-x-y-z.jar`) para um local conhecido.

DrJava
^^^^^^

NetBeans
^^^^^^^^

Pela linha de comando
^^^^^^^^^^^^^^^^^^^^^

Usando o Gson
~~~~~~~~~~~~~
A primeira coisa que vamos ver é como codificar um objeto Java qualquer em uma string JSON. Com a biblioteca Gson, fica bem fácil. Observe a classe `GsonExample` abaixo, onde codificamos um objeto `Pessoa` em uma String JSON.

[source,java]
-----
import com.google.gson.Gson;

public class GsonExample {
    public static void main(String[] args) {
        Pessoa p = new Pessoa("João da Silva Sauro", 20, 75.2, 1.81);
        Gson gson = new Gson();

        String json = gson.toJson(p);
        System.out.println(json);
    }
}
-----

Como você pôde observar, basta chamar o método `toJson()` passando como argumento o objeto que queremos que seja codificado em formato JSON. A classe `Pessoa` utilizada no exemplo pode ser acessada link:src/Pessoa.java[aqui].

A saída gerada pela execução do programa acima é o objeto `Pessoa` representado em formato JSON:

-----
{"nome":"João da Silva Sauro","idade":20,"altura":1.81,"peso":75.2}
-----

Se quisermos fazer o contrário, isto é, reconstruir um objeto a partir de uma string JSON, vamos usar o método `fromJson()`. O método `fromJson()` recebe como parâmetro uma string contendo os dados no formato JSON e a classe do objeto que está representado no JSON, que será a classe do objeto retornado pela chamada ao método. Para reconstruir um objeto `Pessoa` a partir de uma string JSON, temos que passar `Pessoa.class` como segundo argumento para o método `fromJson()`.

[source,java]
-----
Pessoa p2 = gson.fromJson(json, Pessoa.class);
System.out.println(p2.getNome());
-----


Manipulando objetos de estrutura desconhecida
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Quando manipulamos objetos JSON vindos da web, é muito provável que a estrutura deles seja desconhecida da gente. Por exemplo, se quisermos escrever um programa que obtem a lista de posts de um determinado subreddit do http://www.reddit.com[reddit.com], nós não temos em nosso computador uma classe previamente criada para representar cada um dos posts que irão existir no JSON retornado.

Quando ocorrer uma situação dessas, podemos tratar esses dados como `JsonObject`, o que permite que acessemos campos individuais do JSON através de métodos específicos.

Vamos ver um exemplo prático para entendermos melhor.

Pegando dados do Reddit
^^^^^^^^^^^^^^^^^^^^^^^
O reddit tem um esquema que permite que, em uma URL qualquer, adicionemos o sufixo `".json"` para obter o conteúdo daquela URL em formato JSON. Essa é uma iniciativa bem legal do reddit, pois facilita a vida do desenvolvedor que quiser adicionar dados do reddit em sua aplicação. (__kudos para eles!__)

A primeira coisa que temos que fazer no nosso programa é obter o conteúdo JSON do subreddit desejado. O código abaixo faz isso:

[source,java]
-----
InputStream input = new URL("http://www.reddit.com/r/programming/.json").openStream();
Reader reader = new InputStreamReader(input, "UTF-8");
Scanner s = new Scanner(reader);
String json = s.nextLine();
-----

Criamos um http://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html[`InputStream`] ligado à URL do reddit e logo em seguida criamos um objeto http://docs.oracle.com/javase/7/docs/api/java/io/Reader.html[`Reader`] sobre esse `InputStream` e sobre ele criamos um http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html[`Scanner`], de onde lemos o conteúdo JSON, que é enviado todo em uma linha só, podendo ser lido com o método `nextLine()`.

Veja um pequeno trecho do JSON obtido:

[source]
-----
{
    'kind': 'Listing',
    'data': {
        'modhash': '',
        'children': [{
                'kind': 't3',
                'data': {
                    'domain': 'i.imgur.com',
                    'subreddit': 'WTF',
                    'likes': None,
                    'id': '1ajwg4',
                    'title': 'This was the disabled toilet at an airport in Myanmar. I was questioned by security for 25 minutes after taking it.',
                    'score': 1,
                    'over_18': False,
                    'downs': 25,
                    'saved': False,
                    'is_self': False,
                    'permalink': '/r/WTF/comments/1ajwg4/this_was_the_disabled_toilet_at_an_airport_in/',
                    'name': 't3_1ajwg4',
                    'created': 1363673738.0,
                    'url': 'http://i.imgur.com/gRqqYTq.jpg',
                    'author_flair_text': None,
                    'author': 'mfizzled',
                    'created_utc': 1363644938.0,
                    'num_comments': 17,
                    'ups': 26
                }
            },
            // outros elementos foram omitidos para simplificar
        ],
        'after': 't3_1ajoim',
        'before': None
    }
}
-----

Acima podemos ver que os posts do reddit estão dentro de um array JSON (nomeado como `'children'`). Cada post vai ter um elemento `'data'` que contém os dados relativos a ele, como título (`'title'`), URL (`'url'`), usuário que postou (`'author'`), dentre outros. Observe que, devido ao tamanho exagerado do arquivo, o código acima mostra apenas um pequeno trecho do JSON obtido. Se quiser ver o arquivo completo: http://codebeautify.org/jsonviewer/2b1c87#[clique aqui para ver uma obter uma representação visual do arquivo], link:src/reddit.json[ou aqui para baixá-lo].

A figura abaixo nos dá uma visualização de um pedaço do JSON obtido, onde os posts aparecem como elementos numerados. Isso ocorre porque os posts são retornados em um array.

image::images/img/tree.png[caption]

.Arrays JSON
[NOTE]
===============================
Em JSON, coleções de elementos são representados por arrays. Enquanto objetos comuns são delimitados por `{` e `}`, os arrays JSON são delimitados por `[` e `]`. Abaixo podemos ver um exemplo de dados em formato JSON, contendo uma informação do tipo string e um array de objetos, cada um contendo dois inteiros.
[source,json]
-----
{
    "nome": "João",
    "notas": [
        {"nota": 9, "peso": 2},
        {"nota": 8, "peso": 3},
        {"nota": 7, "peso": 3},
        {"nota": 4, "peso": 2}
    ]
}
-----
O array pode ser obtido no exemplo acima acessando o campo `"notas"` no objeto JSON.
===============================


Agora que temos o conteúdo JSON retornado pelo reddit em uma string chamada `json`, nosso trabalho é extrair informações dessa string. O conteúdo JSON recebido não pode ser mapeado para algum objeto previamente conhecido, como `Pessoa`, `Aluno`, etc, pois sua estrutura é definida pelo site que o fornece. Assim, vamos tratá-lo com os tipos fornecidos pela biblioteca Gson, que são: http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonElement.html[`JsonElement`], http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html[`JsonObject`] e http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonArray.html[`JsonArray`].

[source,java]
-----
JsonParser parser = new JsonParser();
JsonObject jsobj = parser.parse(json).getAsJsonObject();
-----

Primeiro criamos um `JsonParser`, que é o objeto que fará a análise e separação do conteúdo do JSON recebido. Após fazer essa análise, o método `parse` retorna um objeto do tipo `JsonObject` contendo o JSON inteiro.

Para obtermos a lista de posts, precisaremos antes obter o elemento `data`, que contém o elemento `children`, que por sua vez contém um array com os posts.

[source,java]
-----
JsonArray posts = jsobj.getAsJsonObject("data").getAsJsonArray("children");
-----

Agora temos em `posts` um array JSON que poderemos percorrer para obter os dados desejados. Como já vimos anteriormente, dentro do array temos vários objetos contendo alguns campos, dentre os quais está o campo `data`, que contém os dados que nos interessam. Veja o exemplo abaixo:

[source,java]
-----
for (JsonElement p : posts) {
  String title = p.getAsJsonObject().getAsJsonObject("data").get("title").getAsString();
  String url = p.getAsJsonObject().getAsJsonObject("data").get("url").getAsString();
  System.out.println(title + "-" + url);
}
-----

No código acima, percorremos todos os elementos contidos no array retornado e acessamos o campo `data`, que possui um campo `title` e um campo `url`, dentre outros dados úteis.

.O for melhorado
[NOTE]
===============================
O `for` é tão utilizado para percorrer elementos de arrays ou coleções que algumas linguagens criaram um __açúcar sintático__ para facilitar a travessia dessas estruturas. Java, por exemplo, oferece o `for`-melhorado (__improved for__), que permite a iteração sobre arrays ou coleções sem a necessidade de criação de um contador para controle do acesso aos elementos individuais.

O que seria feito assim:
[source,java]
-----
// considere que elementos é um array de objetos JsonElement
for (int i = 0; i < elementos.size(); i++) {
    System.out.println(elementos[i].get("data"));
}
-----
Pode ser feito de forma mais elegante com o `for`-melhorado:
[source,java]
-----
for (JsonElement jobj : elementos) {
    System.out.println(jobj.get("data"));
}
-----
O `for` acima pode ser lido como: __"para cada objeto do tipo `JsonElement` em `elementos`, imprima o seu campo data"__.
===============================

Exemplo Completo
~~~~~~~~~~~~~~~~

[source,java]
-----
import com.google.gson.Gson;
import java.io.InputStream;
import java.io.Reader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.Scanner;
import com.google.gson.JsonParser;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

public class TesteReddit {

  public static void main(String[] args) {
    try {
      InputStream input = new URL("http://www.reddit.com/r/programming/.json").openStream();
      Reader reader = new InputStreamReader(input, "UTF-8");
      Scanner s = new Scanner(reader);
      String json = s.nextLine();

      JsonParser parser = new JsonParser();
      JsonObject jsobj = parser.parse(json).getAsJsonObject();
      JsonArray posts = jsobj.getAsJsonObject("data").getAsJsonArray("children");
      for (JsonElement post : posts) {
        String title = post.getAsJsonObject().getAsJsonObject("data").get("title").getAsString();
        String url = post.getAsJsonObject().getAsJsonObject("data").get("url").getAsString();
        System.out.println(title + "-" + url);
      }
    } catch(Exception e) {
      e.printStackTrace();
    }
  }
}
-----
