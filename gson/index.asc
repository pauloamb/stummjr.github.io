Manipulando JSON em Java com Gson
=================================
Prof. Valdir Stumm Júnior - <valdir.stumm@blumenau.ifc.edu.br>


http://pt.wikipedia.org/wiki/JSON[JSON] é um formato muito popular para representação de dados, utilizado principalmente para a troca de dados entre programas. Veja abaixo o exemplo de um objeto de um tipo `Pessoa` representado em JSON:

[source,java]
-----
{
    "nome": "João da Silva Sauro",
    "cpf": "999.999.999-99",
    "email": "joao@joao.com",
}
-----

Por ser puramente textual, esse formato permite que programas escritos em linguagens de programação diferentes troquem dados de uma forma descomplicada. Como um programa escrito em Java poderia trocar dados com um programa escrito em Python? Cada uma tem sua forma de representar objetos na memória. Um objeto Java não poderia ser carregado na memória de um programa Python, pois não são compatíveis.

Usando JSON, o programa escrito em Java gera uma representação JSON do objeto em questão (que vai ser uma simples string) e envia ao programa escrito em Python, que sabendo como manipular JSON, pega a representação em JSON e constrói um objeto Python.

// colocar imagem mostrando como funfaria isso

JSON em Java com Gson
---------------------
http://code.google.com/p/google-gson/[Gson] é uma biblioteca Java desenvolvida pela Google que implementa as funcionalidades necessárias para codificar objetos Java em formato JSON e para decodificar conteúdo JSON para objetos Java.

Instalação
~~~~~~~~~~
Vá até a http://code.google.com/p/google-gson/downloads/list[página de downloads do projeto] e baixe o arquivo .zip contendo o Gson. Feito isso, extraia o conteúdo (especialmente o arquivo `gson-x-y-z.jar`) para um local conhecido.

DrJava
^^^^^^

NetBeans
^^^^^^^^

Pela linha de comando
^^^^^^^^^^^^^^^^^^^^^

Usando o Gson
~~~~~~~~~~~~~

[source,java]
-----
import com.google.gson.Gson;

public class GsonExample {
    public static void main(String[] args) {
        Pessoa p = new Pessoa("João da Silva Sauro", 20, 75.2, 1.81);
        Gson gson = new Gson();

        String json = gson.toJson(p);
        System.out.println(json);
    }
}
-----

**Note:** fazer merge com texto do outro notebook

Manipulando objetos de estrutura desconhecida
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Quando manipulamos objetos JSON vindos da web, é muito possível que não conheçamos de antemão a estrutura desses objetos. Por exemplo, se quisermos escrever um programa que obtem a lista de posts de um determinado subreddit do http://www.reddit.com[reddit.com], nós não temos uma classe previamente criada para representar cada um dos posts que irão existir no JSON retornado.

Quando ocorrer uma situação dessas, podemos tratar esses dados como `JsonObject`, o que permite que acessemos campos individuais do JSON através de métodos específicos.

Bom, chega de conversa e vamos ver um exemplo prático para entendermos melhor.

Pegando dados do Reddit
^^^^^^^^^^^^^^^^^^^^^^^
Para cada URL do reddit, podemos adicionar o sufixo `".json"` para obter o conteúdo daquela URL em formato JSON. Essa é uma iniciativa bem legal do reddit, pois facilita a vida do desenvolvedor que quiser adicionar dados do reddit em sua aplicação. (__kudos para eles!__)

Antes de qualquer coisa, temos que obter o conteúdo JSON do subreddit desejado. O código abaixo faz isso:

[source,java]
-----
InputStream input = new URL("http://www.reddit.com/r/programming/.json").openStream();
Reader reader = new InputStreamReader(input, "UTF-8");
Scanner s = new Scanner(reader);
String json = s.nextLine();
-----

Criamos um http://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html[`InputStream`] ligado à URL do reddit e logo em seguida criamos um objeto http://docs.oracle.com/javase/7/docs/api/java/io/Reader.html[`Reader`] sobre esse `InputStream` e sobre ele criamos um http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html[`Scanner`], de onde lemos o conteúdo JSON, que é enviado todo em uma linha só, podendo ser lido com o método `nextLine()`. 

Veja um pequeno trecho do JSON obtido:

[source]
-----
{
    'kind': 'Listing',
    'data': {
        'modhash': '',
        'children': [{
                'kind': 't3',
                'data': {
                    'domain': 'i.imgur.com',
                    'subreddit': 'WTF',
                    'likes': None,
                    'id': '1ajwg4',
                    'title': 'This was the disabled toilet at an airport in Myanmar. I was questioned by security for 25 minutes after taking it.',
                    'score': 1,
                    'over_18': False,
                    'downs': 25,
                    'saved': False,
                    'is_self': False,
                    'permalink': '/r/WTF/comments/1ajwg4/this_was_the_disabled_toilet_at_an_airport_in/',
                    'name': 't3_1ajwg4',
                    'created': 1363673738.0,
                    'url': 'http://i.imgur.com/gRqqYTq.jpg',
                    'author_flair_text': None,
                    'author': 'mfizzled',
                    'created_utc': 1363644938.0,
                    'num_comments': 17,
                    'ups': 26
                }
            },
            // outros elementos foram omitidos para simplificar
        ],
        'after': 't3_1ajoim',
        'before': None
    }
}
-----

Acima podemos ver que os posts do reddit estão dentro de um array JSON (nomeado como `'children'`). Cada post vai ter um elemento `'data'` que contém os dados relativos a ele, como título (`'title'`), URL (`'url'`), usuário que postou (`'author'`), dentre outros.

.Arrays JSON
[NOTE]
===============================
Em JSON, coleções de elementos são representados por arrays. Enquanto objetos comuns são delimitados por `{` e `}`, os arrays JSON são delimitados por `[` e `]`. Abaixo podemos ver um exemplo de dados em formato JSON, contendo uma informação do tipo string e um array de objetos, cada um contendo dois inteiros.
[source,json]
-----
{
    "nome": "João",
    "notas": [
        {"nota": 9, "peso": 2},
        {"nota": 8, "peso": 3},
        {"nota": 7, "peso": 3},
        {"nota": 4, "peso": 2}
    ]
}
-----
O array pode ser obtido no exemplo acima acessando o campo `"notas"` no objeto JSON.
===============================


Agora temos o conteúdo JSON retornado pelo reddit em uma string chamada `json`. Nosso trabalho agora é extrair informações dessa string. O conteúdo JSON recebido não pode ser mapeado para algum objeto previamente conhecido, como `Pessoa`, `Aluno`, etc, pois sua estrutura é definida pelo site que o fornece. Assim, vamos tratá-lo com os tipos fornecidos pela biblioteca Gson, que são: http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonElement.html[`JsonElement`], http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html[`JsonObject`] e http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonArray.html[`JsonArray`].

[source,java]
-----
JsonParser parser = new JsonParser();
JsonObject jsobj = parser.parse(json).getAsJsonObject();
-----

Primeiro criamos um `JsonParser`, que é o objeto que fará a análise e separação do conteúdo do JSON recebido. Para obtermos a lista de posts, precisamos antes obter o elemento `data`, que contém o elemento `children`.

[source,java]
-----
JsonArray posts = jsobj.getAsJsonObject("data").getAsJsonArray("children");
-----

Agora temos em `posts` um array JSON que poderemos percorrer para obter os dados desejados. Como já vimos anteriormente, dentro do array, temos vários objetos contendo alguns campos, dentre os quais está o campo `data`, que contém os dados que nos interessam. Veja o exemplo abaixo:

[source,java]
-----
for (JsonElement p : posts) {
  String title = p.getAsJsonObject().getAsJsonObject("data").get("title").getAsString();
  String url = p.getAsJsonObject().getAsJsonObject("data").get("url").getAsString();
  System.out.println(title + "-" + url);
}
-----

No código acima, percorremos todos os elementos contidos no array retornado e acessamos o campo `data`, que por sua vez possui um campo `title` e um campo `url`, dentre outros dados úteis.


[source,java]
-----
import com.google.gson.Gson;
import java.io.InputStream;
import java.io.Reader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.Scanner;
import com.google.gson.JsonParser;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

public class TesteReddit {

  public static void main(String[] args) {
    try {
      InputStream input = new URL("http://www.reddit.com/r/programming/.json").openStream();
      Reader reader = new InputStreamReader(input, "UTF-8");
      Scanner s = new Scanner(reader);
      String json = s.nextLine();

      JsonParser parser = new JsonParser();
      JsonObject jsobj = parser.parse(json).getAsJsonObject();
      JsonArray posts = jsobj.getAsJsonObject("data").getAsJsonArray("children");
      for (JsonElement post : posts) {
        String title = post.getAsJsonObject().getAsJsonObject("data").get("title").getAsString();
        String url = post.getAsJsonObject().getAsJsonObject("data").get("url").getAsString();
        System.out.println(title + "-" + url);
      }
    } catch(Exception e) {
      e.printStackTrace();
    }
  }
}

-----

http://docs.oracle.com/javase/7/docs/api/java/io/FileWriter.html

https://code.google.com/p/google-http-java-client/wiki/HTTP
