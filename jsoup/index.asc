Raspando a web com Jsoup
========================
Prof. Valdir Stumm Júnior - <valdir.stumm@blumenau.ifc.edu.br>


Introdução
----------
A Web está repleta de informações. A grande maioria dessas informações é descrita em um formato chamado http://pt.wikipedia.org/wiki/HTML[HTML]. Dados que se encontram nesse formato são renderizados pelos navegadores web, dando aos usuários uma visão mais amigável desses dados. Porém, esse formato não é muito amigável para o programador que deseja extrair informações de dentro dele. É um tanto comum precisarmos buscar e extrair da web algum tipo de informação. Por exemplo, existem várias páginas na web que fornecem a previsão do tempo; mas como fazer para obter os dados da previsão e mostrá-los no aplicativo que estamos desenvolvendo? Seria necessário criar um programa capaz de baixar e ler o HTML e procurar por essa informação lá dentro. Esse tipo de trabalho é chamado de "raspagem de dados da web", e é um tanto trabalhoso e complexo se realizado sem a utilização de mecanismos apropriados.

.O que é "raspagem de dados"?
[NOTE]
===============================
Raspagem de dados da web (do inglês __webscraping__) é o ato de utilizar um conjunto de ferramentas para extrair dados de páginas web de forma automatizada. Normalmente, a raspagem de dados é feita por programas que baixam o conteúdo da página e analisam a mesma para extrair informações.

Mecanismos de busca, como o Google, utilizam técnicas de raspagem de dados para construção de suas bases de dados de palavras-chave e referências. O software que faz isso é chamado de __web crawler__ e possui a tarefa de varrer a web armazenando as palavras que encontrar e seguir todos os links encontrados nessas páginas.
===============================

http://jsoup.org/[JSoup] é uma biblioteca Java para manipulação de conteúdo em formato HTML. Com ela, é possível ler e extrair informações de arquivos HTML com facilidade. Você, jogador(a) de __League of Legends__ (LOL), deve acessar com frequência o fórum do LOL no Brasil, para saber de novidades relacionadas ao jogo. A imagem abaixo mostra a página principal do fórum:

image::images/img/1.png[width=500]

Não seria legal poder obter essas informações sem precisar acessar a página toda vez? Que tal um programinha em Java que liste na tela os 10 tópicos mais recentes do fórum? Ou então, um programinha que nos avise quando aparece um tópico novo no fórum?

Para que isso seja possível, precisaremos aprender a lidar com duas questões fundamentais:

1.   Como baixar um arquivo HTML da web em Java?
2.   Como extrair informações do arquivo HTML baixado?

Este tutorial irá cobrir esses dois tópicos, utilizando o Jsoup como biblioteca de suporte. Em um primeiro momento, vamos dar uma revisada rápida sobre HTML. Depois, vamos ver como utilizar o Jsoup para extrair informações de arquivos HTML.


HTML
----
http://pt.wikipedia.org/wiki/HTML[HTML (__HyperText Markup Language__)] é a linguagem utilizada para definição de páginas na web. O HTML é utilizado basicamente para definir a apresentação de páginas na web. Em geral, as páginas web possuem uma estrutura básica semelhante:

[source,html]
-----
<html>
	<head>

	</head>

	<body>

	</body>
</html>
-----

Cada trecho de um código HTML é delimitado por **tags**. Por exemplo, a tag **<html>** delimita o início e o final do documento HTML. Já as tags **<head>** e **<body>** delimitam, respectivamente, o **cabeçalho**, que irá conter metadados sobre a página, e o **corpo** do documento, que terá o conteúdo da página em si. Cada valor delimitado por uma tag é chamado de **elemento** do HTML.

Dentro de um elemento HTML podemos ter outros elementos. Por exemplo:
	
[source,html]
-----
<html>
    <head>
        <title>Uma página qualquer</title>
    </head>
    <body>
        <div id="content">
            <p class="content-header">
                Aqui vai um conteúdo 
                <a class="link" href="http://www.google.com/">qualquer</a>, 
                um texto sem fundamento algum, escrito sem a mínima 
                intenção de despertar qualquer interesse por parte
                do <a class="link-old"> leitor</a>.
            </p>

            <div class="content-data">
                <p>16/03/2013</p>
            </div>
        </div>

        <div class="footer">
            Nenhum direito reservado.
        </div>
    </body>
</html>
-----

Dentro do elemento delimitado pela tag `body`, temos dois elementos `div`. Dentro do primeiro `div` (identificado unicamente pelo nome `content`), temos um parágrafo (`p`) contendo um texto com dois links `a` dentro, e outro `div`, com um parágrafo contento uma data. No segundo `div` (definido como sendo do tipo `footer`), temos apenas um texto. Veja a imagem abaixo para entender melhor a estrutura do HTML.


image::images/img/3.0.png[width=400]


Como você pôde ver, um documento HTML é composto por uma estrutura hierárquica de elementos. Cada elemento é composto pelo nome da tag, pelos atributos passados à tag e por nós filhos. Cada elemento dentro de um HTML é "filho" de outro elemento, isto é, está contido dentro de outro elemento, com exceção do "pai" de todos, o elemento raiz, definido pela tag `html`.

Esse documento HTML pode então renderizado por um navegador.

Atributos em elementos HTML
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Um elemento HTML pode possuir atributos, através dos quais são passadas informações adicionais a esse elemento. Por exemplo, um link em uma página web nada mais é do que um elemento do tipo `a`, com um atributo `href` contendo o endereço para o qual o link deverá remeter. Veja um exemplo:

[source,html]
-----
Uma parte deste texto contém <a href="http://www.google.com.br/">um link para o Google</a>.
-----

Muitas páginas web tem sua estrutura definida em um arquivo HTML e a formatação, como cores, fontes e tamanhos, definida em um arquivo http://developer.mozilla.org/pt-BR/docs/CSS/Getting_Started[CSS], que é uma linguagem para definição de estilos. Para definir elementos que vão ganhar determinado estilo, os designers das páginas definem o estilo no CSS e, no HTML, "informam" que o elemento pertence a tal classe de estilo. Por exemplo, se houver um estilo chamado `container`, podemos fazer com que um elemento do tipo http://pt-br.html.net/tutorials/css/lesson8.php[`div`] em nosso HTML tenha esse estilo atribuindo ao seu atributo `class` o valor `containter`:

[source,html]
-----
<div class="containter">Este texto terá o estilo definido pela classe CSS container.</div>
-----

Isso facilita bastante o trabalho de quem está escrevendo programas para extrair informações de dentro de códigos HTML. No http://www.reddit.com/[reddit.com], que lista links interessantes sobre os mais variados assuntos, todos os títulos de links estão "marcados" com a classe `title`. Ou seja, é barbadinha escrever um extrator de informações do reddit, pois basta procurar no HTML dele por elementos que pertençam à classe `title`. Para melhorar ainda mais, a maioria das bibliotecas para fazer extração de informações de HTML já possuem métodos prontos que fazem isso pra gente.

Mais sobre HTML
~~~~~~~~~~~~~~~
Para saber mais sobre HTML, leia a http://developer.mozilla.org/pt-BR/docs/Web/HTML[documentação da Mozilla sobre o assunto]. Além disso, para explorar mais as páginas HTML e entender melhor suas estruturas, aprenda a utilizar as "Ferramentas do Desenvolvedor" do Google Chrome (http://www.youtube.com/watch?v=wGmQGYM5wLM[vídeo explicativo]) ou o http://getfirebug.com/[Firebug], que é um plugin que funciona tanto no Firefox quanto no Chrome.


Jsoup
-----
Agora que já sabemos o que é um arquivo HTML e como ele é composto, podemos começar a brincar de "raspar" as páginas web utilizando a biblioteca Jsoup em nossos programas Java. Mas, antes de mais nada, é preciso "instalar" o Jsoup.


Instalação
~~~~~~~~~~
Vá até a http://jsoup.org/download[página de downloads do Jsoup] e baixe o arquivo `jsoup-x-y-z.jar` que estiver listado na página. Observe que `x`, `y` e `z` são números relativos à versão atual do Jsoup, que no momento da escrita deste tutorial era `1.7.3`.

.Arquivos .jar
[NOTE]
===============================
Arquivos .jar são utilizados para agrupar várias classes Java em um único arquivo. Eles são amplamente utilizados para distribuição de bibliotecas de código Java que não estão inclusas na biblioteca-padrão.
===============================

Para que possamos utilizar a biblioteca recém baixada nos nossos programas, precisaremos adicionar tal biblioteca ao editor no qual estivermos desenvolvendo, para que ele saiba onde procurar as classes quando formos utilizá-las.


DrJava
^^^^^^
Para adicionar o Jsoup ao DrJava, vá em __Edit__ -> __Preferences__. Na janela de preferências, no item __Resource Locations__ há um elemento chamado __Extra classpath__. Clique no botão __Add__ logo abaixo dele, vá até a pasta onde o .jar do Jsoup foi gravado e selecione tal arquivo. Feito isso, clique no botão OK na janela de preferências. A imagem abaixo mostra um pedaço do processo.

image::images/img/2.png[width=500]

Agora o DrJava será capaz de compilar e executar código que utiliza o Jsoup.

NetBeans
^^^^^^^^
No NetBeans, você deverá adicionar o .jar ao projeto no qual quiser utilizar o Jsoup. Com o projeto aberto, clique com o botão direito sobre o nome do projeto e escolha a opção "Propriedades", como mostra a imagem abaixo:

image::images/img/5.0.png[width=200]

Na janela de propriedades, selecione a opção "Libraries", então clique em "Add JAR/Folder" (1 na imagem abaixo), selecione o arquivo no seu sistema de arquivos e confirme clicando em "OK" (2 na imagem abaixo).

image::images/img/5.png[width=500]

Feito isso, seu projeto estará apto a utilizar a API Jsoup.

Testando a instalação
^^^^^^^^^^^^^^^^^^^^^
Para termos certeza de que a instalação está correta, vamos compilar e executar um programa de teste.

[source,java]
-----
import java.io.IOException;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;


public class Exemplo1
{
    public static void main(String[] args)
    {
        try {
            Document doc = Jsoup.connect("http://google.com").get();
            String title = doc.title();
            System.out.println("Título : " + title);   
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
}
-----

Salve o código acima em um arquivo chamado `Exemplo1.java`, compile-o e execute-o. O programa deverá mostrar como resultado o texto: "Título : Google". A imagem abaixo mostra a execução do programa no DrJava.

image::images/img/3.png[width=500]

Agora que o Jsoup está instalado, vamos começar a brincadeira! 


Conhecendo o Jsoup
~~~~~~~~~~~~~~~~~~
Antes de escrevermos nossos programas para "raspar" os nossos sites preferidos, precisaremos aprender um pouco mais sobre a estrutura do Jsoup. Com o Jsoup, podemos obter o conteúdo de páginas web e também fazer o __parsing__ do documento HTML retornado.

.O que é parsing?
[NOTE]
===============================
Fazer o __parsing__ de um documento significa analisá-lo de forma que seja possível extrair informações sintáticas do mesmo. Por exemplo, após fazer o __parsing__ de um documento HTML, podemos facilmente obter o conteúdo da tag `body` do documento, pois o __parsing__ já analisou e separou os componentes do arquivo.

__Parsear__ um documento HTML é uma tarefa bem complicadinha, pois além de existirem muitas variações possíveis sobre a organização do documento, também existem muitos documentos HTML com estruturas inválidas por aí. Os navegadores web acabam renderizando esses documentos sem problemas, mas fazer uma análise sintática do conteúdo não é tão simples assim. Por isso que, ao invés de criarmos nossos próprios mecanismos de análise usando os métodos da classe String, vamos utilizar a biblioteca Jsoup, que faz todo o trabalho "sujo" pra gente.
===============================


Baixando uma página com o Jsoup
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Para escrever um programinha que "raspa" o conteúdo do fórum do LOL, a primeira coisa que temos que aprender é como baixar uma página web utilizando o Jsoup. Para fazer isso, vamos utilizar o método estático http://jsoup.org/apidocs/org/jsoup/Jsoup.html#connect(java.lang.String)[`Jsoup.connect()`]. Esse método é definido da seguinte forma:

[source,java]
-----
public static Connection connect(String url)
-----

Isto é, recebe como parâmetro uma URL (__Uniform Resource Location__) e retorna como resultado um objeto do tipo http://jsoup.org/apidocs/org/jsoup/helper/HttpConnection.html[`HttpConnection`]. Um dos métodos disponíveis em objetos `HttpConnection` é o método http://jsoup.org/apidocs/org/jsoup/Connection.html#get()[`get()`]. Esse método realiza as duas operações que precisamos para fazer a análise de uma página web: ele faz o download do conteúdo HTML da URL solicitada e já realiza o __parsing__ do HTML, retornando um objeto do tipo http://jsoup.org/apidocs/org/jsoup/nodes/Document.html[`Document`]. Um objeto `Document` armazena internamente um documento HTML já analisado, isto é, com suas fatias devidamente separadas. Mais para frente veremos mais detalhes sobre objetos desse tipo.

O código para fazer o download e analisar o conteúdo de uma URL é bem simples:


[source,java]
-----
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

...
	String url = "http://forums.br.leagueoflegends.com/board/forumdisplay.php?f=13";
	Document doc = Jsoup.connect(url).get();
...
-----

Obtendo elementos da página
^^^^^^^^^^^^^^^^^^^^^^^^^^^
Um elemento de uma página web é qualquer coisa delimitada por tags dentro da página. Por exemplo, um link é um elemento delimitado pela tag **a** (`<a href="...">...</a>`). Uma imagem é um elemento delimitado pela tag **img** (`<img src="...">...</img>`). O corpo do documento HTML é um elemento, delimitado pela tag **body**, e assim por diante. Elementos estruturais do HTML, como **head**, **title** e **body** podem ser obtidos por chamadas aos métodos `head()`, `title()` e `body()`, respectivamente. Por exemplo, se chamarmos o método `title()` sobre o `Document` retornado pelo método `get()`, vamos obter o título da página baixada. Veja:

[source,java]
-----
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

...
	String url = "http://forums.br.leagueoflegends.com/board/forumdisplay.php?f=13";
	Document doc = Jsoup.connect(url).get();
	System.out.println(doc.title());
...
-----

Se executarmos o código acima, teremos como saída:

	Comunidade League of Legends

Legal, não? Agora tente imprimir o conteúdo da tag **body** do fórum do LOL.


Acessando elementos específicos
+++++++++++++++++++++++++++++++

Além dos elementos estruturais mais comuns, também podemos acessar os demais elementos da página. Usaremos o método `select()` do objeto `Document` retornado pelo `get()` para obter elementos individuais da página baixada, como por exemplo um link, uma imagem, uma célula de uma tabela, etc.

Por exemplo, para obter todas as imagens que aparecem na listagem de tópicos no fórum do LOL, podemos fazer o seguinte:

[source,java]
-----
import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

...
	String url = "http://forums.br.leagueoflegends.com/board/forumdisplay.php?f=13";
	Document doc = Jsoup.connect(url).get();
	Elements elements = doc.select("img");
	for(int i = 0; i < elements.size(); i++) {
		System.out.println( elements.get(i) );
	}
...
-----

O método http://jsoup.org/apidocs/org/jsoup/select/Elements.html#select(java.lang.String)[`select()`] retorna um objeto do tipo http://jsoup.org/apidocs/org/jsoup/select/Elements.html[`Elements`], que é um conjunto de objetos `Element`, cada um representando um dos elementos retornados. No caso da nossa consulta, todos os elementos serão relativos à tags **img**.

A saída do programa acima será parecida com:


	<img src="lol_theme/img/staff_post_icon.gif" alt="Riot Post" />
	<img src="lol_theme/img/staff_post_icon.gif" alt="Riot Post" />
	<img src="lol_theme/img/staff_post_icon.gif" alt="Riot Post" />
	<img src="lol_theme/img/staff_post_icon.gif" alt="Riot Post" />
	<img src="lol_theme/img/staff_post_icon.gif" alt="Riot Post" />
	<img src="lol_theme/img/staff_post_icon.gif" alt="Riot Post" />
	...


Filtrando elementos por atributos da tag
++++++++++++++++++++++++++++++++++++++++
Se quisermos obter todos os links de uma determinada página, vamos utilizar o método `select()` novamente, mas dessa vez passando uma informação adicional. Um link em HTML é composto por uma tag **a** contendo um atributo **href** com o valor da URL. Veja um exemplo de um link:

[source,html]
-----
<a href="http://www.google.com.br"> texto do link </a>
-----

Assim, para obter todas as tags **a** que contenham um atributo **href**, podemos passar ao `select()` **o nome da tag com o nome do atributo entre colchetes**:

[source,java]
-----
Elements elements = doc.select("a[href]");
-----

Portanto, para obter os elementos do HTML que **possuem** determinado atributo, basta passar  ao método `select()` uma string no formato `"nome da tag[nome do atributo]"`.


Filtrando elementos pela classe CSS
+++++++++++++++++++++++++++++++++++
Muitas vezes, o desenvolvedor da página utiliza classes CSS para classificar os elementos do seu layout. Quem desenvolveu o fórum do LOL, **marcou** todos os títulos das páginas com a classe CSS `thread-title-link`. Ou seja, dentro do HTML da página, todos os elementos que representam títulos de posts no fórum são tags **a** contendo `"thread-title-link"` como valor do atributo `class`. Veja na imagem abaixo:

image::images/img/4.png[width=700]

Para obter os elementos de uma **tag** marcada com uma classe CSS, podemos continuar usando o método `select()`, mas agora passando o nome da **tag** e o nome da classe CSS em questão, unidos por um ponto:

[source,java]
-----	
Elements e = doc.select("a.thread-title-link")
-----	

Portanto, para obter os elementos que foram declarados com determinada classe CSS, podemos passar o nome da classe logo após o ponto. Por exemplo: `div.codigo`, que representa todas os elementos do tipo `div`, que possuam `codigo` como classe, como o `div` apresentado abaixo:

[source,html]
-----
<div class="codigo">
	algum conteúdo qualquer
	aqui
</div>
-----

Obtendo os títulos do Fórum do LOL
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Você já deve ter percebido que, para cada informação que quisermos extrair de uma página, precisaremos antes analisar o HTML da mesma para definir como extrair tal informação dela. 
O que queremos extrair da página principal do fórum do LOL são os títulos dos tópicos listados nela. Analisando o HTML dessa página, vimos que cada título de tópico está envolto por uma tag **a** parecida com:

[source,html]
-----
<a href="showthread.php?t=82704" id="thread_title_82704" class="float-left thread-title-link thread-status_new">
	RP Bônus Extra por tempo limitado
</a>
-----

Com o que vimos na seção anterior, fica fácil obter todos os títulos de posts da página principal do fórum do LOL. Veja:

[source,java]
-----
include::src/ListadorDeTopicosLOL.java[tabsize=2]
-----

.Tratamento de Exceções
[NOTE]
===============================
Uma exceção é um evento inesperado que ocorre durante a execução de um programa Java e que pode ser tratada através de estruturas específica para o tratamento de exceções como `try-catch`. Em Java, blocos de código que têm potencial para disparar uma exceção devem ser envoltos com um bloco `try-catch`, como o mostrado no código acima. O método `get` é um exemplo de método que pode gerar uma exceção, causada por uma possível falha de conexão com a rede. Sendo assim, ele deve ser envolto por um bloco de tratamento de exceções. Leia mais na http://www.caelum.com.br/apostila-java-orientacao-objetos/excecoes-e-controle-de-erros/[apostila da Caelum].
===============================

Executando o código acima, obteremos os seguintes resultados:
	
	Pré-Temporada: discurso aos Invocadores
	As transferências para o Brasil estão abertas
	RP Bônus Extra por tempo limitado
	Indique um Amigo
	Promoção: Compre duas páginas de runas pelo preço de uma
	Começa a batalha por Freljord
	Riot Contrata!!
	Como resgatar sua skin Tristana Garota Riot
	Nidalee Caçadora de Cabeças está disponível
	Procura-se: Contador
	Campeão em Destaque: o relançamento de Katarina
	Recompensa da página brasileira no Facebook
	Notas de Atualização da Ilha das Sombras
	Rotação de Campeões Grátis: semana 9
	Lissandra e skins de Freljord disponíveis
	Rotação de Campeões Grátis: semana 10
	Revelamos Zac, a Arma Secreta
	...

Cada elemento contido no objeto `e` (do tipo `Elements`) é um objeto `Element` e como tal, possui um nome de tag, atributos e conteúdo. Essas propriedades podem ser obtidas através de chamadas aos seguintes métodos:

* `nodeName()` ou `tagName()`: retorna o nome da tag.
* `text()`: retorna o somente texto contido no elemento em questão, sem código HTML.
* `html()`: retorna o conteúdo do elemento em questão, incluindo o código HTML.
* `val()`: retorna o valor contido num elemento do tipo `input` de um formulário.
* `getAllElements()`: retorna todos os elementos contidos no elemento no qual o método for chamado.
* `getElementsByAttribute(String attr)`: retorna todos os elementos contidos que tem um atributo nomeado com nome passado como parâmetro.
* `getElementsByClass(String className)`: retorna todos os elementos contidos no elemento em questão que pertencem à classe `className`.


Exercícios
----------
1. Reescreva o programa anterior de forma que ele liste apenas os 10 tópicos mais recentes.
2. Modifique o código do exercício anterior para mostrar também o nome do autor da última postagem de cada tópico.
3. Modifique o código do exercício anterior para mostrar a quantidade de views de cada tópico e, no final, o total de views dos 10 tópicos.


Sugestões de Projeto
--------------------
1. Escreva um programa que liste os filmes em cartaz de algum dos cinemas da região.
2. Escreva um programa que mostre os horários do ônibus que faz a linha Blumenau-Pomerode. **Bônus:** incremente o programa para que ele mostre somente o próximo horário de ônibus, com base no horário atual.
3. Escreva um programa que busque na web e mostre o cardápio do dia em algum restaurante da região.
4. Escreva um programa que busque a classificação do Brasileirão 2014 e mostre somente os 10 primeiros colocados e os 4 últimos.
5. Escreva um programa que busque e liste as notícias mais recentes do site oficial do __League of Legends (LOL)__.

Desafio
-------
Sabendo como obter e filtrar o conteúdo de uma página web, escreva um programa que monitore o fórum do LOL e emita um aviso sonoro quando houver uma nova postagem no fórum.
